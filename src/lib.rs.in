pub mod handlers;
pub mod providers;

extern crate emailaddress;
extern crate hyper;
extern crate iron;
extern crate lettre;
extern crate openssl;
extern crate rand;
extern crate redis;
extern crate router;
extern crate rustc_serialize;
extern crate serde_json;
extern crate time;
extern crate url;
extern crate urlencoded;

use emailaddress::EmailAddress;
use openssl::crypto::hash;
use openssl::crypto::pkey::PKey;
use serde_json::de::from_reader;
use rand::{OsRng, Rng};
use redis::Client;
use rustc_serialize::base64::{self, ToBase64};
use std::collections::{BTreeMap, HashMap};
use std::fs::File;
use std::io::{BufReader, Write};
use std::iter::Iterator;


/// Configuration data for a "famous" identity provider.
///
/// Used as part of the `AppConfig` struct.
#[derive(Clone)]
struct ProviderConfig {
    /// URL pointing to the OpenID configuration document.
    discovery: String,
    /// Client ID issued for this daemon instance by the provider.
    client_id: String,
    /// Secret issued for this daemon instance by the provider.
    secret: String,
    /// Issuer origin as used in identity tokens issued by the provider.
    /// Used to check that the issuer in the token matches expectations.
    issuer: String,
}


/// Configuration data for this daemon instance.
#[derive(Clone)]
pub struct AppConfig {
    /// Version of the daemon (used in the `Welcome` Handler).
    version: String,
    /// Base URL where this daemon can be found. This is used to construct
    /// callback URLs.
    base_url: String,
    /// Private key used to sign identity tokens.
    priv_key: PKey,
    /// Redis database connector.
    store: Client,
    /// Duration in seconds for expiry of data stored in Redis.
    expire_keys: usize,
    /// Email sender (email address, then human-readable name).
    sender: (String, String),
    /// Duration in seconds for expiration of identity tokens.
    token_validity: i64,
    /// A map of "famous" identity providers. Each key is an email domain,
    /// the value holds the configuration required to act as an application
    /// doing OpenID Connect against the provider.
    providers: BTreeMap<String, ProviderConfig>,
}


#[derive(Deserialize)]
pub struct Config {
    base_url: String,
    private_key_file: String,
    redis: String,
    sender: String,
    expire_keys: usize,
    token_validity: usize,
    providers: HashMap<String, Provider>,
}

#[derive(Deserialize)]
pub struct Provider {
    discovery: String,
    client_id: String,
    secret: String,
}

/// Implementation with single method to read configuration from JSON.
impl AppConfig {
    pub fn from_json_file(file_name: &str) -> Result<AppConfig, ()> {
        // TODO: Clean up these unwraps(), return an Error type
        let file = File::open(file_name).unwrap();
        let config: Config = from_reader(BufReader::new(file)).unwrap();

        let private_key_file = File::open(config.private_key_file).unwrap();
        let priv_key = PKey::private_key_from_pem(&mut BufReader::new(private_key_file)).unwrap();

        let store = Client::open(&*config.redis).unwrap();

        let providers = config.providers.into_iter().map(|(host, params)|
            (host, ProviderConfig {
                discovery: params.discovery,
                client_id: params.client_id,
                secret: params.secret,
                issuer: "".to_string(), // FIXME, not present in test.json, but checked by previous code
            })
        ).collect::<BTreeMap<String, ProviderConfig>>();

        Ok(AppConfig {
            version: env!("CARGO_PKG_VERSION").to_string(),
            base_url: config.base_url,
            priv_key: priv_key,
            sender: ("".to_string(), "".to_string()), // FIXME, single string in test.json, but (addr, name) tuple in previous code
            store: store,
            expire_keys: config.expire_keys,
            token_validity: config.token_validity as i64, // FIXME: Why was this an i64?
            providers: providers,
        })
    }
}


/// Helper function to build a session ID for a login attempt.
///
/// Put the email address, the client ID (RP origin) and some randomness into
/// a SHA256 hash, and encode it with URL-safe base64 encoding. This is used
/// as the key in Redis, as well as the state for OAuth authentication.
fn session_id(email: &EmailAddress, client_id: &str) -> String {
    let mut rng = OsRng::new().unwrap();
    let mut bytes_iter = rng.gen_iter();
    let rand_bytes: Vec<u8> = (0..16).map(|_| bytes_iter.next().unwrap()).collect();

    let mut hasher = hash::Hasher::new(hash::Type::SHA256);
    hasher.write(email.to_string().as_bytes()).unwrap();
    hasher.write(client_id.as_bytes()).unwrap();
    hasher.write(&rand_bytes).unwrap();
    hasher.finish().to_base64(base64::URL_SAFE)
}


/// Helper method to create a JWT from given header and payload.
///
/// Takes care of UTF-8 and (URL-safe) base64-encoding, then hashing and
/// signing with the provided private key. Returns the full JWT.
fn create_jwt(key: &PKey, header: &str, payload: &str) -> String {
    let mut input = Vec::<u8>::new();
    input.extend(header.as_bytes().to_base64(base64::URL_SAFE).into_bytes());
    input.push(b'.');
    input.extend(payload.as_bytes().to_base64(base64::URL_SAFE).into_bytes());
    let sha256 = hash::hash(hash::Type::SHA256, &input);
    let sig = key.sign(&sha256);
    input.push(b'.');
    input.extend(sig.to_base64(base64::URL_SAFE).into_bytes());
    String::from_utf8(input).unwrap()
}
